upset.plot <- to_upset %>%
mutate(subcategory=case_when(subcategory=="a" ~ "ORF",
subcategory=="C_name" ~ "pathway",
subcategory=="D_name" ~ "reaction",
T ~ subcategory)) %>%
mutate(EG_type=paste(omic, subcategory, sep=" ")) %>%
group_by(module) %>%
mutate(EG_type=list(EG_type)) %>%
ungroup() %>%
ggplot(aes(x=EG_type, y=EV)) +
geom_violin() +
stat_summary(fun.y="max", geom="point", color="red") +
scale_y_continuous(breaks=c(0, 2, 5, 10, 30, 60)) +
scale_x_upset(n_intersections=Inf, ytrans="sqrt") +
theme_classic()
upset.plot
ggsave(paste0(wd, "/results/figures/upsetMRS.png"), upset.plot, dpi=320, height=6, width=7)
ggsave(paste0(wd, "/results/figures/upsetMRS.svg"), upset.plot, dpi=320, height=6, width=7)
short_names_NonStatES <- c("ORFs",
"Tax Phylum", "Tax Class", "Tax Order", "Tax Family", "Tax Genus", "Tax Species",
"Fun KO", "Fun Pathway")
names(short_names_NonStatES) <- c("raw.a",
"tax.phylum", "tax.class", "tax.order", "tax.family", "tax.genus", "tax.species",
"fun.D_name", "fun.C_name")
to_upset %>%
group_by(omic, category, subcategory) %>%
mutate(count_EG=n(), EV_sum=sum(value.scaled)) %>%
dplyr::select(-c(EV_sum, EV)) %>%
ungroup() %>%
dplyr::select(omic, category, subcategory, value.scaled) %>%
pivot_longer(names_to="measure", values_to="value", -c(omic, category, subcategory)) %>%
mutate(Subset=paste0(category, ".", subcategory), Subset=short_names_NonStatES[Subset]) %>%
mutate(Subset=factor(Subset, levels=rev( c("ORFs",
"Tax Phylum", "Tax Class", "Tax Order", "Tax Family", "Tax Genus", "Tax Species",
"Fun KO", "Fun Pathway"))),
omic=factor(omic, levels=c("MG", "MT", "MP"))) %>%
ggplot(aes(x=Subset, y=value)) +
geom_bar(stat="identity") +
coord_flip() +
facet_grid(omic~measure, scales="free_x") +
geom_rect(aes(xmin=-Inf, xmax=Inf, ymin=-Inf, ymax=Inf),
colour="black", fill=NA, inherit.aes=FALSE, size=0.5) +
theme_classic() +
theme(panel.grid.major = element_line(colour="grey", size=0.25, linetype="dashed"),
legend.position = "none", panel.grid.major.y = element_blank()) +
scale_y_continuous(expand=c(0.01, 0.01), breaks = function(x) unique(floor(pretty(seq(0, (max(x) + 1) * 1.1))))) +
scale_fill_viridis(discrete=T, option="viridis")
noise.dd <- data.frame(EG_name=non_stat_tot_a, module=mergedColors, noise=colSds(abs((all.EGs[2:nrow(all.EGs),] %>% `colnames<-`(EG_names))[,non_stat_tot_a] - (all.EGs[1:(nrow(all.EGs)-1),] %>% `colnames<-`(EG_names))[,non_stat_tot_a])), EV=to_upset$EV)
noise.ff <- noise.dd %>%
filter(!startsWith(EG_name, "MP")) %>%
mutate(weighted_noise=noise*(1-EV)) %>%
separate(EG_name, into=c("omic", "category", "subcategory", "EG_num"), sep="\\.", remove=F) %>%
separate(EG_num, into=c("to_delete", "EG_num"), sep="EG", remove=T) %>%
dplyr::select(-to_delete) %>%
filter(EG_num>1) %>%
group_by(module) %>%
summarise(min_noise=min(noise), rep_EG=EG_name[which(noise==min_noise)])
noise.ff
signals.EVs <- to_upset %>%
ungroup() %>%
mutate(module=colors2num[module]) %>%
dplyr::select(module, EV) %>%
group_by(module) %>%
summarise(EV=max(EV))
signals.EVs
sum(signals.EVs$EV)
write.csv(file=paste0(wd, "/results/tables/signals_EVs.csv"), as.data.frame(signals.EVs), row.names=F)
Sys.setenv("LANGUAGE"="En")
Sys.setlocale("LC_ALL", "en_US.UTF-8")
sampled_weeks <- as.numeric(floor(difftime(ymd(colnames(MG.raw.train.clr.corr)), ymd(colnames(MG.raw.train.clr.corr))[1], units="week"))+1)
non_stat2mod <- mergedColors
names(non_stat2mod) <- non_stat_tot_a
signals.plot <- as.data.frame((all.EGs[sampled_weeks, ] %>% `colnames<-`(EG_names))[,non_stat_tot_a]) %>%
`rownames<-`(colnames(MG.raw.train.clr.corr)) %>%
rownames_to_column(var="Sample") %>%
pivot_longer(names_to="EG_name", values_to="value", -c(Sample)) %>%
mutate(module=non_stat2mod[EG_name]) %>%
separate(EG_name, into=c("omic", "category", "subcategory", "EG_num"), sep="\\.", remove=F) %>%
mutate(module=colors2num[non_stat2mod[EG_name]]) %>%
ggplot(aes(x=as.Date(Sample), y=value, group=EG_name)) +
geom_point() +
geom_line() +
geom_smooth(se=0, alpha=.5) +
facet_wrap(module~., ncol=4, scales="free") +
theme_classic()
signals.plot
ggsave(paste0(wd, "/results/figures/signals_traceMRS.png"), signals.plot, dpi=320, height=6, width=10)
ggsave(paste0(wd, "/results/figures/signals_traceMRS.svg"), signals.plot, dpi=320, height=6, width=10)
signals.plot <- as.data.frame((all.EGs[sampled_weeks, ] %>%`colnames<-`(EG_names))[,noise.ff$rep_EG]) %>%
`rownames<-`(colnames(MG.raw.train.clr.corr)) %>%
rownames_to_column(var="Sample") %>%
pivot_longer(names_to="EG_name", values_to="value", -Sample) %>%
separate(EG_name, into=c("omic", "category", "subcategory", "EG_num"), sep="\\.", remove=F) %>%
mutate(module=colors2num[non_stat2mod[EG_name]]) %>%
ggplot(aes(x=as.Date(Sample), y=value, group=EG_name)) +
geom_point() +
geom_line() +
facet_wrap(module~., ncol=4, scales="free_y") +
theme_classic() +
theme(axis.text.x = element_text(angle = 60, hjust = 1))
as.data.frame((all.EGs[sampled_weeks, ] %>% `colnames<-`(EG_names))[,noise.ff$rep_EG]) %>%
`rownames<-`(colnames(MG.raw.train.clr.corr)) %>%
rownames_to_column(var="Sample") %>%
pivot_longer(names_to="EG_name", values_to="value", -Sample) %>%
separate(EG_name, into=c("omic", "category", "subcategory", "EG_num"), sep="\\.", remove=F) %>%
mutate(module=colors2num[non_stat2mod[EG_name]]) %>%
ggplot(aes(x=as.Date(Sample), y=value, group=EG_name)) +
geom_point() +
geom_line() +
facet_wrap(module~., ncol=4, scales="free_y") +
theme_classic() +
theme(axis.text.x = element_text(angle = 60, hjust = 1))
signals.plot
ggsave(paste0(wd, "/results/figures/signalsMRS.png"), signals.plot, dpi=320, height=4.5, width=10)
ggsave(paste0(wd, "/results/figures/signalsMRS.svg"), signals.plot, dpi=320, height=4.5, width=10)
as.data.frame(all.EGs[sampled_weeks, ] %>%
`colnames<-`(EG_names)) %>%
`rownames<-`(colnames(MG.raw.train.clr.corr)) %>%
rownames_to_column(var="Sample") %>%
pivot_longer(names_to="EG_name", values_to="value", -Sample) %>%
separate(EG_name, into=c("omic", "category", "subcategory", "EG_num"), sep="\\.", remove=F) %>%
mutate(module=colors2num[non_stat2mod[EG_name]]) %>%
filter(!is.na(module)) %>%
dplyr::select(c("EG_name", "omic", "module")) %>%
distinct() %>%
ungroup() %>%
group_by(omic, module) %>%
summarise(n=n()) %>%
ungroup() %>%
pivot_wider(names_from=module, values_from=n) %>%
column_to_rownames(var="omic")
EG.mat.wi
granger.mat <- matrix(ncol=length(noise.ff$rep_EG), nrow=length(noise.ff$rep_EG)) %>%
`colnames<-`(noise.ff$rep_EG) %>%
`rownames<-`(noise.ff$rep_EG)
weeks.EGs <- as.data.frame((all.EGs[sampled_weeks, ] %>% `colnames<-`(EG_names))[,noise.ff$rep_EG])
weeks.EGs[!1:nrow(all.EGs)%in%sampled_weeks, ] <- NA
weekly_imputed <- t(impute_weekly(t(weeks.EGs), colnames(MT.raw.train.clr.corr)))
for(i in rownames(granger.mat)){
for(j in colnames(granger.mat)){
if(i != j){
granger.mat[i,j] <- (grangertest(weekly_imputed[,noise.ff$rep_EG][,i],
weekly_imputed[,noise.ff$rep_EG][,j],
order=10, na.action=na.omit))$`Pr(>F)`[2]
}
}
}
sum(granger.mat<0.05, na.rm=T)
EG.mat.wi <- weekly_imputed[,noise.ff$rep_EG]
colnames(EG.mat.wi) <- colors2num[non_stat2mod[colnames(EG.mat.wi)]]
vars <- colnames(EG.mat.wi)
simplex_out <- lapply(vars, function(var) {
simplex(EG.mat.wi[,var], E=1:20)
})
names(simplex_out) <- vars
embedding.plot <- bind_rows(simplex_out) %>%
mutate(signal=unlist(lapply(names(simplex_out), rep, 20)),
signal=factor(signal, levels=paste0("S", 1:17)),
rho=unlist(rho)) %>%
ggplot(aes(x=E, y=rho)) +
geom_line() +
facet_wrap(signal~., ncol=6, scales="free") +
theme_classic() +
labs(x="Embedding dimensions (E)", y="Forecast Skill (rho)")
embedding.plot
ggsave(paste0(wd, "/results/figures/embedding.png"), embedding.plot, dpi=320, height=4.5, width=10)
ggsave(paste0(wd, "/results/figures/embedding.svg"), embedding.plot, dpi=320, height=4.5, width=10)
best_E <- sapply(simplex_out, function(df) {
df$E[which.max(df$rho)]
})
best_E
smap_out <- lapply(vars, function(var) {
s_map(EG.mat.wi[,var], E = best_E[var])
})
names(smap_out) <- names(simplex_out)
nonlinearity.plot <- bind_rows(smap_out) %>%
mutate(signal=unlist(lapply(names(simplex_out), rep, 18)),
signal=factor(signal, levels=paste0("S", 1:17)),
rho=unlist(rho)) %>%
ggplot(aes(x=theta, y=rho)) +
geom_line() +
facet_wrap(signal~., ncol=6, scales="free") +
theme_classic() +
labs(x="Nonlinearity (theta)", y="Forecast Skill (rho)")
nonlinearity.plot
ggsave(paste0(wd, "/results/figures/nonlinearity.png"), nonlinearity.plot, dpi=320, height=4.5, width=10)
ggsave(paste0(wd, "/results/figures/nonlinearity.svg"), nonlinearity.plot, dpi=320, height=4.5, width=10)
rbind((S7_xmap_S8 %>%
pivot_longer(names_to="Direction", -c(LibSize, E, tau, tp, nn))),
(S4_xmap_S8 %>%
pivot_longer(names_to="Direction", -c(LibSize, E, tau, tp, nn))),
(S9_xmap_S8 %>%
pivot_longer(names_to="Direction", -c(LibSize, E, tau, tp, nn))),
(S10_xmap_S17 %>%
pivot_longer(names_to="Direction", -c(LibSize, E, tau, tp, nn))),
(S1_xmap_S17 %>%
pivot_longer(names_to="Direction", -c(LibSize, E, tau, tp, nn)))) %>%
dplyr::select(LibSize, Direction, value) %>%
mutate(Edge=lapply(str_split(Direction, ":"), sort)) %>%
mutate(Direction=gsub(pattern=":", replacement="->", x=Direction)) %>%
rowwise() %>%
mutate(Edge=paste(Edge, collapse="-")) %>%
ggplot(aes(x=LibSize, y=value, group=Direction, color=Direction)) +
geom_line() +
theme_classic() +
facet_wrap(Edge~., nrow=2, scales="free") +
labs(x="Library Size", y="Cross Map Skill (rho)")
S7_xmap_S8 <- ccm(EG.mat.wi, lib = segments, pred = segments, lib_column = "S7",
target_column = "S8", E = best_E["S7"], silent = T, replace = T, stats_only = T, lib_sizes=c(20, 50, 1))
S7_xmap_S8 <- ccm(EG.mat.wi, lib = segments, pred = segments, lib_column = "S7",
target_column = "S8", E = best_E["S7"], silent = T, replace = T, stats_only = T, lib_sizes=c(20, 50, 1))
S4_xmap_S8 <- ccm(EG.mat.wi, lib = segments, pred = segments, lib_column = "S4",
target_column = "S8", E = best_E["S4"], silent = T, replace = T, stats_only = T, lib_sizes=c(20, 50, 1))
S9_xmap_S8 <- ccm(EG.mat.wi, lib = segments, pred = segments, lib_column = "S9",
target_column = "S8", E = best_E["S9"], silent = T, replace = T, stats_only = T, lib_sizes=c(20, 50, 1))
S10_xmap_S17 <- ccm(EG.mat.wi, lib = segments, pred = segments, lib_column = "S10",
target_column = "S17", E = best_E["S10"], silent = T, replace = T, stats_only = T, lib_sizes=c(20, 50, 1))
S1_xmap_S17 <- ccm(EG.mat.wi, lib = segments, pred = segments, lib_column = "S1",
target_column = "S17", E = best_E["S1"], silent = T, replace = T, stats_only = T, lib_sizes=c(20, 50, 1))
S6_xmap_S8 <- ccm(EG.mat.wi, lib = segments, pred = segments, lib_column = "S6",
target_column = "S7", E = best_E["S6"], silent = T, replace = T, stats_only = T, lib_sizes=c(20, 50, 1))
S5_xmap_S8 <- ccm(EG.mat.wi, lib = segments, pred = segments, lib_column = "S5",
target_column = "S7", E = best_E["S5"], silent = T, replace = T, stats_only = T, lib_sizes=c(20, 50, 1))
rbind((S7_xmap_S8 %>%
pivot_longer(names_to="Direction", -c(LibSize, E, tau, tp, nn))),
(S4_xmap_S8 %>%
pivot_longer(names_to="Direction", -c(LibSize, E, tau, tp, nn))),
(S9_xmap_S8 %>%
pivot_longer(names_to="Direction", -c(LibSize, E, tau, tp, nn))),
(S10_xmap_S17 %>%
pivot_longer(names_to="Direction", -c(LibSize, E, tau, tp, nn))),
(S1_xmap_S17 %>%
pivot_longer(names_to="Direction", -c(LibSize, E, tau, tp, nn))),
(S6_xmap_S8 %>%
pivot_longer(names_to="Direction", -c(LibSize, E, tau, tp, nn))),
(S5_xmap_S8 %>%
pivot_longer(names_to="Direction", -c(LibSize, E, tau, tp, nn)))) %>%
dplyr::select(LibSize, Direction, value) %>%
mutate(Edge=lapply(str_split(Direction, ":"), sort)) %>%
mutate(Direction=gsub(pattern=":", replacement="->", x=Direction)) %>%
rowwise() %>%
mutate(Edge=paste(Edge, collapse="-")) %>%
ggplot(aes(x=LibSize, y=value, group=Direction, color=Direction)) +
geom_line() +
theme_classic() +
facet_wrap(Edge~., nrow=2, scales="free") +
labs(x="Library Size", y="Cross Map Skill (rho)")
rbind((S7_xmap_S8 %>%
pivot_longer(names_to="Direction", -c(LibSize, E, tau, tp, nn))),
(S4_xmap_S8 %>%
pivot_longer(names_to="Direction", -c(LibSize, E, tau, tp, nn))),
(S9_xmap_S8 %>%
pivot_longer(names_to="Direction", -c(LibSize, E, tau, tp, nn))),
(S10_xmap_S17 %>%
pivot_longer(names_to="Direction", -c(LibSize, E, tau, tp, nn))),
(S1_xmap_S17 %>%
pivot_longer(names_to="Direction", -c(LibSize, E, tau, tp, nn))),
(S6_xmap_S8 %>%
pivot_longer(names_to="Direction", -c(LibSize, E, tau, tp, nn))),
(S5_xmap_S8 %>%
pivot_longer(names_to="Direction", -c(LibSize, E, tau, tp, nn)))) %>%
dplyr::select(LibSize, Direction, value) %>%
mutate(Edge=lapply(str_split(Direction, ":"), sort)) %>%
mutate(Direction=gsub(pattern=":", replacement="->", x=Direction)) %>%
rowwise() %>%
mutate(Edge=paste(Edge, collapse="-")) %>%
ggplot(aes(x=LibSize, y=value, group=Direction, color=Direction)) +
geom_line() +
theme_classic() +
facet_wrap(Edge~., nrow=3, scales="free") +
labs(x="Library Size", y="Cross Map Skill (rho)")
CCM.plot <- rbind((S7_xmap_S8 %>%
pivot_longer(names_to="Direction", -c(LibSize, E, tau, tp, nn))),
(S4_xmap_S8 %>%
pivot_longer(names_to="Direction", -c(LibSize, E, tau, tp, nn))),
(S9_xmap_S8 %>%
pivot_longer(names_to="Direction", -c(LibSize, E, tau, tp, nn))),
(S10_xmap_S17 %>%
pivot_longer(names_to="Direction", -c(LibSize, E, tau, tp, nn))),
(S1_xmap_S17 %>%
pivot_longer(names_to="Direction", -c(LibSize, E, tau, tp, nn))),
(S6_xmap_S8 %>%
pivot_longer(names_to="Direction", -c(LibSize, E, tau, tp, nn))),
(S5_xmap_S8 %>%
pivot_longer(names_to="Direction", -c(LibSize, E, tau, tp, nn)))) %>%
dplyr::select(LibSize, Direction, value) %>%
mutate(Edge=lapply(str_split(Direction, ":"), sort)) %>%
mutate(Direction=gsub(pattern=":", replacement="->", x=Direction)) %>%
rowwise() %>%
mutate(Edge=paste(Edge, collapse="-")) %>%
ggplot(aes(x=LibSize, y=value, group=Direction, color=Direction)) +
geom_line() +
theme_classic() +
facet_wrap(Edge~., nrow=3, scales="free") +
labs(x="Library Size", y="Cross Map Skill (rho)")
CCM.plot
CCM.plot
ggsave(paste0(wd, "/results/figures/CCM.png"), CCM.plot, dpi=320, height=4.5, width=10)
ggsave(paste0(wd, "/results/figures/CCM.svg"), CCM.plot, dpi=320, height=4.5, width=10)
CCM.plot
ggsave(paste0(wd, "/results/figures/CCM.png"), CCM.plot, dpi=320, height=3.5, width=7)
ggsave(paste0(wd, "/results/figures/CCM.svg"), CCM.plot, dpi=320, height=3.5, width=7)
```
CCM.plot
ggsave(paste0(wd, "/results/figures/CCM.svg"), CCM.plot, dpi=320, height=4.5, width=7)
CCM.plot
ggsave(paste0(wd, "/results/figures/CCM.png"), CCM.plot, dpi=320, height=4.5, width=7)
ggsave(paste0(wd, "/results/figures/CCM.svg"), CCM.plot, dpi=320, height=4.5, width=7)
```
CCM.plot <- rbind((S7_xmap_S8 %>%
pivot_longer(names_to="Direction", -c(LibSize, E, tau, tp, nn))),
(S4_xmap_S8 %>%
pivot_longer(names_to="Direction", -c(LibSize, E, tau, tp, nn))),
(S9_xmap_S8 %>%
pivot_longer(names_to="Direction", -c(LibSize, E, tau, tp, nn))),
(S10_xmap_S17 %>%
pivot_longer(names_to="Direction", -c(LibSize, E, tau, tp, nn))),
(S1_xmap_S17 %>%
pivot_longer(names_to="Direction", -c(LibSize, E, tau, tp, nn))),
(S6_xmap_S8 %>%
pivot_longer(names_to="Direction", -c(LibSize, E, tau, tp, nn))),
(S5_xmap_S8 %>%
pivot_longer(names_to="Direction", -c(LibSize, E, tau, tp, nn)))) %>%
dplyr::select(LibSize, Direction, value) %>%
mutate(Edge=lapply(str_split(Direction, ":"), sort)) %>%
mutate(Direction=gsub(pattern=":", replacement="->", x=Direction)) %>%
rowwise() %>%
mutate(Edge=paste(Edge, collapse="-")) %>%
ggplot(aes(x=LibSize, y=value, group=Direction, color=Direction)) +
geom_line() +
theme_classic() +
facet_wrap(Edge~., nrow=3, scales="free") +
labs(x="Library Size", y="Cross Map Skill (rho)")
CCM.plot
ggsave(paste0(wd, "/results/figures/CCM.png"), CCM.plot, dpi=320, height=4.5, width=7)
ggsave(paste0(wd, "/results/figures/CCM.svg"), CCM.plot, dpi=320, height=4.5, width=7)
corrplot::corrplot(EnvEnvCorr, order = "hclust")
options(stringsAsFactors = F, gsubfn.engine = "R")
Sys.setenv("LANGUAGE"="En")
library(tidyverse)
library(matrixStats)
library(ggridges)
library(compositions)
library(MASS)
library(caret)
library(lubridate)
library(imputeTS)
library(parallel)
library(tseries)
library(forecast)
library(olsrr)
library(fable)
library(viridis)
library(TidyMultiqc)
library(GSEABase)
library(AnnotationDbi)
library(ggnewscale)
library(WGCNA)
library(GOstats)
library(lmtest)
wd <- getwd()
LAO_ko <- read_tsv(paste0(wd, "/data/mantis_integrated.kofam"), col_names=c("ORF", "D_code"))
map_ko <- read_tsv(paste0(wd, "/data/ko.txt"))
LAO_ko <- inner_join(LAO_ko, map_ko)
LAO_samples <- read.table(paste0(wd, "/data/samples.txt"), sep=" ", header=T)
sample_to_date <- as.Date(LAO_samples$Date)
names(sample_to_date) <- LAO_samples$Sample
LAO_meta <- read_tsv(paste0(wd, "/data/LAO_metadata.tsv"))
colnames(LAO_meta) <- c("Date", colnames(LAO_meta)[2:length(colnames(LAO_meta))])
LAO_meta$Date <- as.Date(LAO_meta$Date, "%m/%d/%y")
LAO_meta$Oxygen_manual <- as.numeric(LAO_meta$Oxygen_manual)
LAO_meta$Oxygen_sat_manual <- as.numeric(LAO_meta$Oxygen_sat_manual)
LAO_meta$Time[is.na(LAO_meta$Time)] <- median(LAO_meta$Time, na.rm=T)
LAO_meta <- LAO_meta %>%
mutate(DateTime = ymd_hms(paste(LAO_meta$Date, LAO_meta$Time, sep=" ")))
Sivec_meta <- read_tsv(paste0(wd, "/data/Sivec_Schifflange.csv"))
Sivec_meta$Date <- as.Date(Sivec_meta$Date, "%m/%d/%y")
Sivec_meta <- Sivec_meta %>%
mutate(DateTime = ymd_h(paste(Sivec_meta$Date, Sivec_meta$Time, sep=" ")),
Time = paste0(Time, ":00:00"))
EnvEnvCorr <- cor(as.matrix(LAO_meta %>% dplyr::select(-Date, -Time, -Collector, -Aeration, -Sludge, -DateTime)), use="complete.obs")
corrplot::corrplot(EnvEnvCorr)
selected.env1 <- c("Dry_matter", "PO4.P", "Nitrat", "NH4", "Oxygen",
"Conductivity", "pH_manual", "Temp_manual", "Oxygen_manual")
corrplot::corrplot(cor(LAO_meta[,selected.env1], use="complete.obs"))
EnvEnvCorr <- cor(as.matrix(Sivec_meta %>% dplyr::select(-Date, -Time, -DateTime)), use="complete.obs")
corrplot::corrplot(EnvEnvCorr)
selected.env2 <- c("Inflow_Volume", "Inflow_pH", "Inflow_Conductivity",
"Vat1_pH", "Vat1_Sludge", "Vat1_Nitrat", "Vat1_Oxygen", "Vat1_NH4.N", "Vat1_PO4.P",
"Vat2_pH", "Vat2_Sludge", "Vat2_Nitrat", "Vat2_Oxygen", "Vat2_NH4.N", "Vat2_PO4.P",
"Areation", "Air_Pressure")
corrplot::corrplot(cor(Sivec_meta[,selected.env2], use="complete.obs"))
Sivec_interpolated <- rbind(Sivec_meta,
get_interpolated_Sivec(Sivec_meta,
c(LAO_meta$DateTime))) %>%
distinct(.keep_all = T)
get_interpolated_Sivec <- function(dd, datetime){
for(i in datetime){
if(!(i %in% dd$DateTime)){
lower <- max(dd$DateTime[dd$DateTime<i])
upper <- min(dd$DateTime[dd$DateTime>i])
diff_time <- abs(as.numeric(min(as.numeric(difftime(lower, upper, units="mins")))))
diff_point <- abs(as.numeric(min(as.numeric(difftime(lower, as_datetime(i), units="mins")))))
if(diff_time<300){
mat <- matrix(nrow=diff_time, ncol=ncol(dd)-3)
colnames(mat) <- colnames(dd)[!colnames(dd)%in%c("Date", "Time", "DateTime")]
mat2 <- as.data.frame(rbind(dd[dd$DateTime==lower,!colnames(dd)%in%c("Date", "Time", "DateTime")],
mat,
dd[dd$DateTime==upper,!colnames(dd)%in%c("Date", "Time", "DateTime")]))
mat2 <- na_interpolation(mat2, option="linear")
arr <- c(NA, NA, NA, mat2[diff_point,])
names(arr) <- c("Date", "Time", "DateTime", colnames(dd)[!colnames(dd)%in%c("Date", "Time", "DateTime")])
arr <- arr[colnames(dd)]
dd <- rbind(dd, arr)
dd[nrow(dd), "Date"] <- as.Date(format(as_datetime(i), format="%Y-%m-%d"))
dd[nrow(dd), "Time"] <- (format(as_datetime(i), format="%H:%M:%S"))
dd[nrow(dd), "DateTime"] <- as_datetime(i)
}
}
}
return(dd[dd$DateTime%in%datetime,])
}
EnvEnvCorr <- cor(as.matrix(LAO_meta %>% dplyr::select(-Date, -Time, -Collector, -Aeration, -Sludge, -DateTime)), use="complete.obs")
corrplot::corrplot(EnvEnvCorr)
selected.env1 <- c("Dry_matter", "PO4.P", "Nitrat", "NH4", "Oxygen",
"Conductivity", "pH_manual", "Temp_manual", "Oxygen_manual")
corrplot::corrplot(cor(LAO_meta[,selected.env1], use="complete.obs"))
EnvEnvCorr <- cor(as.matrix(Sivec_meta %>% dplyr::select(-Date, -Time, -DateTime)), use="complete.obs")
corrplot::corrplot(EnvEnvCorr)
selected.env2 <- c("Inflow_Volume", "Inflow_pH", "Inflow_Conductivity",
"Vat1_pH", "Vat1_Sludge", "Vat1_Nitrat", "Vat1_Oxygen", "Vat1_NH4.N", "Vat1_PO4.P",
"Vat2_pH", "Vat2_Sludge", "Vat2_Nitrat", "Vat2_Oxygen", "Vat2_NH4.N", "Vat2_PO4.P",
"Areation", "Air_Pressure")
corrplot::corrplot(cor(Sivec_meta[,selected.env2], use="complete.obs"))
Sivec_interpolated <- rbind(Sivec_meta,
get_interpolated_Sivec(Sivec_meta,
c(LAO_meta$DateTime))) %>%
distinct(.keep_all = T)
env_meta <- full_join(Sivec_interpolated, (LAO_meta %>% dplyr::select(-Time, -Date))) %>%
mutate(Aeration=ifelse(Aeration=="YES", 1, 0))
date2timedate <- LAO_meta$DateTime
names(date2timedate) <- LAO_meta$Date
selected.env <- c(selected.env1, selected.env2)
EnvEnvCorr <- cor(as.matrix(env_meta[, selected.env]), use="pairwise.complete.obs", method="spearman")
corrplot::corrplot(EnvEnvCorr, order = "hclust")
selected.env3 <- c("PO4.P", "Temp_manual", "Dry_matter", "Conductivity", "Aeration", "Vat1_NH4.N", "Vat2_NH4.N", "Nitrat", "Inflow_Volume", "NH4", "Oxygen", "Vat2_pH", "Oxygen_manual", "pH_manual", "Inflow_pH", "Sludge")
corrplot::corrplot(EnvEnvCorr, order = "hclust")
segments
?ccm
?segments()
S7_xmap_S8 <- ccm(EG.mat.wi, lib_column = "S7",
target_column = "S8", E = best_E["S7"], silent = T, replace = T, stats_only = T, lib_sizes=c(20, 50, 1))
CCM.plot <- rbind((S7_xmap_S8 %>%
pivot_longer(names_to="Direction", -c(LibSize, E, tau, tp, nn))),
(S4_xmap_S8 %>%
pivot_longer(names_to="Direction", -c(LibSize, E, tau, tp, nn))),
(S9_xmap_S8 %>%
pivot_longer(names_to="Direction", -c(LibSize, E, tau, tp, nn))),
(S10_xmap_S17 %>%
pivot_longer(names_to="Direction", -c(LibSize, E, tau, tp, nn))),
(S1_xmap_S17 %>%
pivot_longer(names_to="Direction", -c(LibSize, E, tau, tp, nn))),
(S6_xmap_S8 %>%
pivot_longer(names_to="Direction", -c(LibSize, E, tau, tp, nn))),
(S5_xmap_S8 %>%
pivot_longer(names_to="Direction", -c(LibSize, E, tau, tp, nn)))) %>%
dplyr::select(LibSize, Direction, value) %>%
mutate(Edge=lapply(str_split(Direction, ":"), sort)) %>%
mutate(Direction=gsub(pattern=":", replacement="->", x=Direction)) %>%
rowwise() %>%
mutate(Edge=paste(Edge, collapse="-")) %>%
ggplot(aes(x=LibSize, y=value, group=Direction, color=Direction)) +
geom_line() +
theme_classic() +
facet_wrap(Edge~., nrow=3, scales="free") +
labs(x="Library Size", y="Cross Map Skill (rho)")
CCM.plot
6*200
options(stringsAsFactors = F, gsubfn.engine = "R")
Sys.setenv("LANGUAGE"="En")
library(tidyverse)
library(matrixStats)
library(ggridges)
library(compositions)
library(MASS)
library(caret)
library(lubridate)
library(imputeTS)
library(parallel)
library(tseries)
library(forecast)
library(olsrr)
library(fable)
library(viridis)
library(TidyMultiqc)
library(GSEABase)
library(AnnotationDbi)
library(ggnewscale)
library(WGCNA)
library(GOstats)
load(paste0(wd, "/preprocessed/preprocessed_mats_MRS_sampels.RData"))
wd <- getwd()
load(paste0(wd, "/preprocessed/preprocessed_mats_MRS_sampels.RData"))
dim(MG.fun.D_name.train.clr.corr)
rowsum(MG.fun.D_name.train.clr.corr)
rowsum(MG.fun.D_name.train.clr.corr)
rowSums(MG.fun.D_name.train.clr.corr)
colSums(MG.fun.D_name.train.clr.corr)
plot(density())
plot(density(MG.fun.D_name.train.clr.corr))
plot(density(as.matrix(MG.fun.D_name.train.clr.corr)))
View(MG.fun.D_name.test.svd.corr)
